# Number of worker processes running in container
worker_processes 1;

# Run NGINX in foreground (necessary for containerized NGINX)
daemon off;

# Set the location of the server's error log
error_log stderr;

events {
  # Set number of simultaneous connections each worker process can serve
  worker_connections 1024;
}

http {
  client_body_temp_path {{ tempDir }}/client_body_temp;
  proxy_temp_path {{ tempDir }}/proxy_temp;
  fastcgi_temp_path {{ tempDir }}/fastcgi_temp;

  charset utf-8;

  log_format cloudfoundry '$http_x_forwarded_for - $http_referer - [$time_local] "$request" $status $body_bytes_sent';
  access_log /dev/stdout cloudfoundry;

  # Set the default MIME type of responses; 'application/octet-stream'
  # represents an arbitrary byte stream
  default_type application/octet-stream;
  # Map media types to file extensions
  include {{ env "APP_ROOT" }}/includes/mime.types;

  # (Performance) When sending files, skip copying into buffer before sending.
  sendfile on;
  # (Only active with sendfile on) wait for packets to reach max size before
  # sending.
  tcp_nopush on;

  # (Performance) Enable compressing responses
  gzip on;
  # For all clients
  gzip_static always;
  # Including responses to proxied requests
  gzip_proxied any;
  # For responses above a certain length
  gzip_min_length 1100;
  # That are one of the following MIME types
  gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/xml+rss;
  # Compress responses to a medium degree
  gzip_comp_level 6;
  # Using 16 buffers of 8k bytes each
  gzip_buffers 16 8k;

  # Add "Vary: Accept-Encoding” response header to compressed responses
  gzip_vary on;

  # Decompress responses if client doesn't support compressed
  gunzip on;

  # Don't compress responses if client is Internet Explorer 6
  gzip_disable "msie6";

  # Set a timeout during which a keep-alive client connection will stay open on
  # the server side
  keepalive_timeout 30;

  # Ensure that redirects don't include the internal container PORT - <%=
  # ENV["PORT"] %>
  port_in_redirect off;

  # (Security) Disable emitting nginx version on error pages and in the
  # “Server” response header field
  server_tokens off;

  server {
    listen {{port}} default_server;
    server_name _;

    # Directory where static files are located
    root {{ env "APP_ROOT" }}/dist/out-of-school;

    # If HTTP request is made, redirect to HTTPS requests
    set $updated_host $host;
    if ($http_x_forwarded_host != "") {
      set $updated_host $http_x_forwarded_host;
    }

    if ($http_x_forwarded_proto != "https") {
      return 301 https://$updated_host$request_uri;
    }

    location / {
      # Send the content at / in response to *any* requested endpoint
      if (!-e $request_filename) {
        rewrite ^(.*)$ / break;
      }
      # Specify files sent to client if specific file not requested (e.g.
      # GET www.example.com/). NGINX sends first existing file in the list.
      index index.html;

      add_header        Cache-Control "no-store, no-cache, public, must-revalidate, proxy-revalidate, max-age=0";
      add_header        Pragma "no-cache";
      etag              off;
      if_modified_since off;
      expires           -1;

      include {{ env "APP_ROOT" }}/includes/security.conf;
    }

    # (Security) Don't serve dotfiles, except .well-known/, which is needed by
    # LetsEncrypt
    location ~ /\.(?!well-known) {
      deny all;
      return 404;
    }

    location ~* \.(?:json)$ {
      add_header        Cache-Control "no-store, no-cache, public, must-revalidate, proxy-revalidate, max-age=0";
      add_header        Pragma "no-cache";
      etag              off;
      if_modified_since off;
      expires           -1;

      include {{ env "APP_ROOT" }}/includes/security.conf;
    }

    location ~* \.(?:css|js)$ {
      add_header        Cache-Control "public, max-age=2628000"; # 1 month

      include {{ env "APP_ROOT" }}/includes/security.conf;
    }

    location ~* \.(?:jpg|jpeg|gif|png|ico|xml|webp|svg)$ {
      add_header        Cache-Control "public, max-age=86400"; # 1 day

      include {{ env "APP_ROOT" }}/includes/security.conf;
    }

    location ~* \.(?:eot|woff|woff2|ttf|otf) {
      add_header        Cache-Control "public, max-age=2628000"; # 1 month

      # TODO: Allow CORS requests for fonts?
      add_header        Access-Control-Allow-Origin *;

      types     {font/opentype otf;}
      types     {application/vnd.ms-fontobject eot;}
      types     {font/truetype ttf;}
      types     {application/font-woff woff;}
      types     {font/x-woff woff2;}
      types     {image/svg+xml svg svgz;}

      include {{ env "APP_ROOT" }}/includes/security.conf;
    }
  }
}